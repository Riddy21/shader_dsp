#!/usr/bin/env python3
"""
Audio Visualization Script

This script reads the CSV file generated by the audio application and creates
various visualizations of the audio data including waveform plots, frequency
spectrum analysis, and spectrograms.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import signal
from scipy.fft import fft, fftfreq
import argparse
import os

def load_audio_data(csv_file):
    """Load audio data from CSV file."""
    if not os.path.exists(csv_file):
        raise FileNotFoundError(f"CSV file '{csv_file}' not found.")
    
    df = pd.read_csv(csv_file)
    print(f"Loaded {len(df)} audio frames from {csv_file}")
    print(f"Columns: {list(df.columns)}")
    
    return df

def plot_waveform(df, sample_rate=44100, title="Audio Waveform"):
    """Plot the audio waveform in time domain."""
    fig, axes = plt.subplots(2, 1, figsize=(12, 8))
    
    # Convert frame index to time
    time = df['frame'] / sample_rate
    
    # Plot left channel
    axes[0].plot(time, df['left_channel'], 'b-', alpha=0.7, linewidth=0.5)
    axes[0].set_title(f'{title} - Left Channel')
    axes[0].set_xlabel('Time (seconds)')
    axes[0].set_ylabel('Amplitude')
    axes[0].grid(True, alpha=0.3)
    
    # Plot right channel
    axes[1].plot(time, df['right_channel'], 'r-', alpha=0.7, linewidth=0.5)
    axes[1].set_title(f'{title} - Right Channel')
    axes[1].set_xlabel('Time (seconds)')
    axes[1].set_ylabel('Amplitude')
    axes[1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def plot_frequency_spectrum(df, sample_rate=44100, title="Frequency Spectrum"):
    """Plot the frequency spectrum of the audio."""
    fig, axes = plt.subplots(2, 1, figsize=(12, 8))
    
    # Calculate FFT for left channel
    left_fft = fft(df['left_channel'].values)
    left_freqs = fftfreq(len(df), 1/sample_rate)
    
    # Calculate FFT for right channel
    right_fft = fft(df['right_channel'].values)
    right_freqs = fftfreq(len(df), 1/sample_rate)
    
    # Plot left channel spectrum
    axes[0].semilogy(left_freqs[:len(left_freqs)//2], 
                     np.abs(left_fft[:len(left_fft)//2]), 'b-', alpha=0.7)
    axes[0].set_title(f'{title} - Left Channel')
    axes[0].set_xlabel('Frequency (Hz)')
    axes[0].set_ylabel('Magnitude')
    axes[0].grid(True, alpha=0.3)
    axes[0].set_xlim(0, sample_rate/2)
    
    # Plot right channel spectrum
    axes[1].semilogy(right_freqs[:len(right_freqs)//2], 
                     np.abs(right_fft[:len(right_fft)//2]), 'r-', alpha=0.7)
    axes[1].set_title(f'{title} - Right Channel')
    axes[1].set_xlabel('Frequency (Hz)')
    axes[1].set_ylabel('Magnitude')
    axes[1].grid(True, alpha=0.3)
    axes[1].set_xlim(0, sample_rate/2)
    
    plt.tight_layout()
    return fig

def plot_spectrogram(df, sample_rate=44100, title="Spectrogram"):
    """Plot spectrograms of the audio data."""
    fig, axes = plt.subplots(2, 1, figsize=(12, 8))
    
    # Convert frame index to time
    time = df['frame'] / sample_rate
    
    # Create spectrogram for left channel
    f_left, t_left, Sxx_left = signal.spectrogram(df['left_channel'].values, 
                                                  fs=sample_rate, 
                                                  nperseg=1024, 
                                                  noverlap=512)
    
    # Create spectrogram for right channel
    f_right, t_right, Sxx_right = signal.spectrogram(df['right_channel'].values, 
                                                     fs=sample_rate, 
                                                     nperseg=1024, 
                                                     noverlap=512)
    
    # Plot left channel spectrogram
    im1 = axes[0].pcolormesh(t_left, f_left, 10 * np.log10(Sxx_left), 
                            shading='gouraud', cmap='viridis')
    axes[0].set_title(f'{title} - Left Channel')
    axes[0].set_xlabel('Time (seconds)')
    axes[0].set_ylabel('Frequency (Hz)')
    axes[0].set_ylim(0, sample_rate/2)
    plt.colorbar(im1, ax=axes[0], label='Power (dB)')
    
    # Plot right channel spectrogram
    im2 = axes[1].pcolormesh(t_right, f_right, 10 * np.log10(Sxx_right), 
                            shading='gouraud', cmap='viridis')
    axes[1].set_title(f'{title} - Right Channel')
    axes[1].set_xlabel('Time (seconds)')
    axes[1].set_ylabel('Frequency (Hz)')
    axes[1].set_ylim(0, sample_rate/2)
    plt.colorbar(im2, ax=axes[1], label='Power (dB)')
    
    plt.tight_layout()
    return fig

def plot_amplitude_distribution(df, title="Amplitude Distribution"):
    """Plot amplitude distribution histograms."""
    fig, axes = plt.subplots(1, 2, figsize=(12, 5))
    
    # Left channel histogram
    axes[0].hist(df['left_channel'], bins=50, alpha=0.7, color='blue', edgecolor='black')
    axes[0].set_title(f'{title} - Left Channel')
    axes[0].set_xlabel('Amplitude')
    axes[0].set_ylabel('Frequency')
    axes[0].grid(True, alpha=0.3)
    
    # Right channel histogram
    axes[1].hist(df['right_channel'], bins=50, alpha=0.7, color='red', edgecolor='black')
    axes[1].set_title(f'{title} - Right Channel')
    axes[1].set_xlabel('Amplitude')
    axes[1].set_ylabel('Frequency')
    axes[1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def plot_correlation_analysis(df, title="Channel Correlation"):
    """Plot correlation between left and right channels."""
    fig, axes = plt.subplots(1, 2, figsize=(12, 5))
    
    # Scatter plot
    axes[0].scatter(df['left_channel'], df['right_channel'], alpha=0.5, s=1)
    axes[0].set_title(f'{title} - Scatter Plot')
    axes[0].set_xlabel('Left Channel Amplitude')
    axes[0].set_ylabel('Right Channel Amplitude')
    axes[0].grid(True, alpha=0.3)
    
    # Correlation coefficient
    correlation = df['left_channel'].corr(df['right_channel'])
    axes[0].text(0.05, 0.95, f'Correlation: {correlation:.4f}', 
                transform=axes[0].transAxes, fontsize=12, 
                bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
    
    # Difference plot
    difference = df['left_channel'] - df['right_channel']
    time = df['frame'] / 44100  # Assuming 44.1kHz sample rate
    axes[1].plot(time, difference, 'g-', alpha=0.7, linewidth=0.5)
    axes[1].set_title(f'{title} - Left-Right Difference')
    axes[1].set_xlabel('Time (seconds)')
    axes[1].set_ylabel('Amplitude Difference')
    axes[1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def print_audio_statistics(df):
    """Print basic audio statistics."""
    print("\n=== Audio Statistics ===")
    print(f"Total duration: {len(df) / 44100:.2f} seconds")
    print(f"Number of samples: {len(df)}")
    
    print("\nLeft Channel:")
    print(f"  Mean: {df['left_channel'].mean():.6f}")
    print(f"  Std:  {df['left_channel'].std():.6f}")
    print(f"  Min:  {df['left_channel'].min():.6f}")
    print(f"  Max:  {df['left_channel'].max():.6f}")
    print(f"  RMS:  {np.sqrt(np.mean(df['left_channel']**2)):.6f}")
    
    print("\nRight Channel:")
    print(f"  Mean: {df['right_channel'].mean():.6f}")
    print(f"  Std:  {df['right_channel'].std():.6f}")
    print(f"  Min:  {df['right_channel'].min():.6f}")
    print(f"  Max:  {df['right_channel'].max():.6f}")
    print(f"  RMS:  {np.sqrt(np.mean(df['right_channel']**2)):.6f}")
    
    correlation = df['left_channel'].corr(df['right_channel'])
    print(f"\nChannel Correlation: {correlation:.6f}")

def main():
    parser = argparse.ArgumentParser(description='Visualize audio data from CSV file')
    parser.add_argument('csv_file', nargs='?', default='audio_output.csv',
                       help='Path to the CSV file containing audio data (default: audio_output.csv)')
    parser.add_argument('--sample-rate', type=int, default=44100,
                       help='Sample rate of the audio data (default: 44100)')
    parser.add_argument('--save-plots', action='store_true',
                       help='Save plots to files instead of displaying them')
    parser.add_argument('--output-dir', default='plots',
                       help='Directory to save plots (default: plots)')
    
    args = parser.parse_args()
    
    try:
        # Load data
        df = load_audio_data(args.csv_file)
        
        # Print statistics
        print_audio_statistics(df)
        
        # Create output directory if saving plots
        if args.save_plots:
            os.makedirs(args.output_dir, exist_ok=True)
        
        # Generate visualizations
        print("\nGenerating visualizations...")
        
        # Waveform plot
        fig1 = plot_waveform(df, args.sample_rate)
        if args.save_plots:
            fig1.savefig(f'{args.output_dir}/waveform.png', dpi=300, bbox_inches='tight')
            print(f"Saved waveform plot to {args.output_dir}/waveform.png")
        else:
            plt.show()
        plt.close(fig1)
        
        # Frequency spectrum plot
        fig2 = plot_frequency_spectrum(df, args.sample_rate)
        if args.save_plots:
            fig2.savefig(f'{args.output_dir}/frequency_spectrum.png', dpi=300, bbox_inches='tight')
            print(f"Saved frequency spectrum plot to {args.output_dir}/frequency_spectrum.png")
        else:
            plt.show()
        plt.close(fig2)
        
        # Spectrogram plot
        fig3 = plot_spectrogram(df, args.sample_rate)
        if args.save_plots:
            fig3.savefig(f'{args.output_dir}/spectrogram.png', dpi=300, bbox_inches='tight')
            print(f"Saved spectrogram plot to {args.output_dir}/spectrogram.png")
        else:
            plt.show()
        plt.close(fig3)
        
        # Amplitude distribution plot
        fig4 = plot_amplitude_distribution(df)
        if args.save_plots:
            fig4.savefig(f'{args.output_dir}/amplitude_distribution.png', dpi=300, bbox_inches='tight')
            print(f"Saved amplitude distribution plot to {args.output_dir}/amplitude_distribution.png")
        else:
            plt.show()
        plt.close(fig4)
        
        # Correlation analysis plot
        fig5 = plot_correlation_analysis(df)
        if args.save_plots:
            fig5.savefig(f'{args.output_dir}/correlation_analysis.png', dpi=300, bbox_inches='tight')
            print(f"Saved correlation analysis plot to {args.output_dir}/correlation_analysis.png")
        else:
            plt.show()
        plt.close(fig5)
        
        if args.save_plots:
            print(f"\nAll plots saved to {args.output_dir}/ directory")
        else:
            print("\nVisualization complete!")
            
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
